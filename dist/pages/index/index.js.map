{"version":3,"file":"pages/index/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AAAA;AAUA;AAMA;AAJA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAmBA;AAeA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAGA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AAGA;AAEA;;;;;;;;;;;;;;ACrHA;AACA;AAAA;AAMA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;;ACnBA;AAEA;AAAA;AAEA;AAMA;AAJA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AAOA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;ACvCA;AAAA;AAOA;AAGA;AADA;AAEA;AAEA;AACA;AAAA;AACA;AAGA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACJA;AAMA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACZA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AATA;AAAA;AAWA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChLA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;ACrBA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACJA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1BA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://appmusic/./src/pages/index/index.tsx?63ff","webpack://appmusic/._src_components_FinalScreen_index.tsx","webpack://appmusic/._src_components_GameStatus_index.tsx","webpack://appmusic/._src_components_Hangman_index.tsx","webpack://appmusic/._src_components_Keyboard_index.tsx","webpack://appmusic/._src_components_LettersHistory_index.tsx","webpack://appmusic/._src_constants_config.ts","webpack://appmusic/._src_constants_keyboard.ts","webpack://appmusic/._src_constants_questions.ts","webpack://appmusic/._src_hooks_useGameLogic.ts","webpack://appmusic/._src_hooks_useKeyboard.ts","webpack://appmusic/._src_pages_index_index.tsx","webpack://appmusic/._src_utils_gameHelpers.ts","webpack://appmusic/._src_utils_messages.ts","webpack://appmusic/._node_modules_@babel_runtime_helpers_esm_arrayLikeToArray.js","webpack://appmusic/._node_modules_@babel_runtime_helpers_esm_arrayWithHoles.js","webpack://appmusic/._node_modules_@babel_runtime_helpers_esm_defineProperty.js","webpack://appmusic/._node_modules_@babel_runtime_helpers_esm_iterableToArrayLimit.js","webpack://appmusic/._node_modules_@babel_runtime_helpers_esm_nonIterableRest.js","webpack://appmusic/._node_modules_@babel_runtime_helpers_esm_objectSpread2.js","webpack://appmusic/._node_modules_@babel_runtime_helpers_esm_slicedToArray.js","webpack://appmusic/._node_modules_@babel_runtime_helpers_esm_unsupportedIterableToArray.js"],"sourcesContent":["/// <reference types=\"@tarojs/taro\" />\nimport React, { useEffect } from 'react';\nimport { View, Button } from '@tarojs/components';\nimport Taro from '@tarojs/taro';\nimport ReactConfetti from 'react-confetti';\nimport { APP_CONFIG } from '../../constants/config';\nimport { QUESTIONS } from '../../constants/questions';\nimport { KEYBOARD_CONFIG } from '../../constants/keyboard';\nimport { useGameLogic } from '../../hooks/useGameLogic';\nimport { useKeyboard } from '../../hooks/useKeyboard';\nimport GameStatus from '../../components/GameStatus';\nimport FinalScreen from '../../components/FinalScreen';\nimport '../../styles/index.scss';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Index = function Index() {\n  useEffect(function () {\n    Taro.setNavigationBarTitle({\n      title: APP_CONFIG.TITLE\n    });\n  }, []);\n  var _useGameLogic = useGameLogic(),\n    state = _useGameLogic.state,\n    handleGuess = _useGameLogic.handleGuess,\n    restartGame = _useGameLogic.restartGame,\n    getMaskedWord = _useGameLogic.getMaskedWord,\n    getFinalMessage = _useGameLogic.getFinalMessage;\n  var _useKeyboard = useKeyboard(handleGuess),\n    keyboardState = _useKeyboard.state,\n    toggleKeyboard = _useKeyboard.toggleKeyboard;\n  var currentQuestionIndex = state.currentQuestionIndex,\n    guessedLetters = state.guessedLetters,\n    wrongGuesses = state.wrongGuesses,\n    showTranslation = state.showTranslation,\n    correctCount = state.correctCount,\n    gameStatus = state.gameStatus,\n    countdown = state.countdown,\n    showConfetti = state.showConfetti;\n  var windowWidth = keyboardState.windowWidth,\n    windowHeight = keyboardState.windowHeight,\n    showKeyboard = keyboardState.showKeyboard;\n\n  // Renderiza o confete apenas na versão H5\n  var confetti = process.env.TARO_ENV === 'h5' && showConfetti ? /*#__PURE__*/_jsx(ReactConfetti, {\n    width: windowWidth,\n    height: windowHeight,\n    recycle: false,\n    numberOfPieces: KEYBOARD_CONFIG.CONFETTI_PIECES,\n    gravity: KEYBOARD_CONFIG.CONFETTI_GRAVITY\n  }) : null;\n  if (gameStatus === 'finished' || currentQuestionIndex >= QUESTIONS.length) {\n    return /*#__PURE__*/_jsx(FinalScreen, {\n      message: getFinalMessage(),\n      correctCount: correctCount,\n      totalQuestions: QUESTIONS.length,\n      countdown: countdown,\n      onRestart: restartGame\n    });\n  }\n  var currentQuestion = QUESTIONS[currentQuestionIndex];\n  return /*#__PURE__*/_jsxs(View, {\n    className: \"game-container\",\n    children: [confetti, /*#__PURE__*/_jsx(GameStatus, {\n      currentQuestion: currentQuestion,\n      currentIndex: currentQuestionIndex,\n      totalQuestions: QUESTIONS.length,\n      correctCount: correctCount,\n      showTranslation: showTranslation,\n      maskedWord: getMaskedWord(),\n      isGameOver: gameStatus === 'lost',\n      countdown: countdown,\n      answer: currentQuestion.answer,\n      wrongGuesses: wrongGuesses,\n      onKeyPress: handleGuess,\n      guessedLetters: guessedLetters,\n      disabled: gameStatus !== 'playing',\n      showKeyboard: showKeyboard\n    }), /*#__PURE__*/_jsx(View, {\n      className: \"game-content\",\n      children: process.env.TARO_ENV === 'weapp' && /*#__PURE__*/_jsx(Button, {\n        className: \"keyboard-toggle\",\n        onClick: toggleKeyboard,\n        children: showKeyboard ? '⌨️' : '📱'\n      })\n    })]\n  });\n};\nexport default Index;","import { View, Text, Button } from '@tarojs/components'\nimport { getGameMessages } from '../../utils/messages'\nimport { formatTime } from '../../utils/gameHelpers'\n\ninterface IFinalScreenProps {\n  message: string\n  correctCount: number\n  totalQuestions: number\n  countdown: number\n  onRestart: () => void\n}\n\nconst FinalScreen: React.FC<IFinalScreenProps> = ({\n  message,\n  correctCount,\n  totalQuestions,\n  countdown,\n  onRestart\n}) => {\n  return (\n    <View className='final-screen'>\n      <Text className='final-message'>{message}</Text>\n      <Text className='final-score'>\n        {getGameMessages.finalScore} {correctCount} de {totalQuestions}\n      </Text>\n      <Text className='countdown-text'>\n        {getGameMessages.restart} {formatTime(countdown)}...\n      </Text>\n      <Button className='restart-button' onClick={onRestart}>\n        {getGameMessages.playAgain}\n      </Button>\n    </View>\n  )\n}\n\nexport default FinalScreen ","import { View, Text, Input } from '@tarojs/components'\nimport { useState } from 'react'\nimport { IQuestion } from '../../types/game.types'\nimport { getGameMessages } from '../../utils/messages'\nimport { formatTime } from '../../utils/gameHelpers'\nimport Hangman from '../Hangman'\nimport Keyboard from '../Keyboard'\nimport LettersHistory from '../LettersHistory'\n\ninterface IGameStatusProps {\n  currentQuestion: IQuestion\n  currentIndex: number\n  totalQuestions: number\n  correctCount: number\n  showTranslation: boolean\n  maskedWord: string\n  isGameOver: boolean\n  countdown: number\n  answer?: string\n  wrongGuesses: number\n  onKeyPress: (letter: string) => void\n  guessedLetters: Set<string>\n  disabled: boolean\n  showKeyboard: boolean\n}\n\nconst GameStatus: React.FC<IGameStatusProps> = ({\n  currentQuestion,\n  currentIndex,\n  totalQuestions,\n  correctCount,\n  showTranslation,\n  maskedWord,\n  isGameOver,\n  countdown,\n  answer,\n  wrongGuesses,\n  onKeyPress,\n  guessedLetters,\n  disabled,\n  showKeyboard\n}) => {\n  const [inputValue, setInputValue] = useState('')\n\n  return (\n    <View className='game-container'>\n      <View className='score-container'>\n        <Text className='progress-text'>\n          Questão {currentIndex + 1} de {totalQuestions}\n        </Text>\n        <Text className='score-text'>\n          Pontuação: {correctCount}/{totalQuestions}\n        </Text>\n      </View>\n\n      <View className='game-content'>\n        <View className='question-section'>\n          <Text className='question-text'>{currentQuestion.question}</Text>\n          <Hangman wrongGuesses={wrongGuesses} />\n          {showTranslation && (\n            <Text className='translation-text'>\n              Tradução: {currentQuestion.translation}\n            </Text>\n          )}\n          <Text className='word-display'>{maskedWord}</Text>\n          {isGameOver && (\n            <View className='game-over-section'>\n              <Text className='answer-text'>\n                A resposta era: {answer}\n              </Text>\n              <Text className='countdown-text'>\n                {getGameMessages.nextQuestion} {formatTime(countdown)}...\n              </Text>\n            </View>\n          )}\n        </View>\n\n        {(process.env.TARO_ENV === 'h5' || showKeyboard) && (\n          <Keyboard\n            onKeyPress={onKeyPress}\n            guessedLetters={guessedLetters}\n            currentAnswer={currentQuestion.answer}\n            disabled={disabled}\n            showKeyboard={showKeyboard}\n          />\n        )}\n\n        {process.env.TARO_ENV === 'weapp' && !showKeyboard && (\n          <View className='input-container'>\n            <Input\n              type='text'\n              className='letter-input'\n              value={inputValue}\n              onInput={(e) => {\n                const input = e.detail.value.toUpperCase()\n                // Processa cada letra da entrada\n                input.split('').forEach(letter => {\n                  if (/^[A-Z]$/.test(letter) && !guessedLetters.has(letter)) {\n                    onKeyPress(letter)\n                  }\n                })\n                // Limpa o input\n                setInputValue('')\n              }}\n              placeholder={getGameMessages.typeLetter}\n            />\n            <LettersHistory\n              guessedLetters={guessedLetters}\n              currentAnswer={currentQuestion.answer}\n            />\n          </View>\n        )}\n      </View>\n    </View>\n  )\n}\n\nexport default GameStatus ","import { View, Text } from '@tarojs/components'\nimport { HANGMAN_PARTS } from '../../constants/config'\n\ninterface IHangmanProps {\n  wrongGuesses: number\n}\n\nconst Hangman: React.FC<IHangmanProps> = ({ wrongGuesses }) => {\n  return (\n    <View className='hangman-display'>\n      <View className='hangman-ascii'>\n        {HANGMAN_PARTS[wrongGuesses].map((line, index) => (\n          <Text key={index} className='hangman-line'>{line}</Text>\n        ))}\n      </View>\n    </View>\n  )\n}\n\nexport default Hangman ","import { View, Button } from '@tarojs/components'\nimport { IKeyboardProps } from '../../types/keyboard.types'\nimport { KEYBOARD_LAYOUT } from '../../constants/keyboard'\n\nconst Keyboard: React.FC<IKeyboardProps> = ({\n  onKeyPress,\n  guessedLetters,\n  currentAnswer,\n  disabled,\n  showKeyboard\n}) => {\n  if (!showKeyboard) return null\n\n  return (\n    <View className='keyboard-section'>\n      {KEYBOARD_LAYOUT.map((row, rowIndex) => (\n        <View key={rowIndex} className='keyboard-row'>\n          {row.map((letter) => (\n            <Button\n              key={letter}\n              className={`letter-button ${\n                guessedLetters.has(letter)\n                  ? currentAnswer.includes(letter)\n                    ? 'correct'\n                    : 'wrong'\n                  : ''\n              }`}\n              onClick={() => onKeyPress(letter)}\n              disabled={guessedLetters.has(letter) || disabled}\n            >\n              {letter}\n            </Button>\n          ))}\n        </View>\n      ))}\n    </View>\n  )\n}\n\nexport default Keyboard ","import { View, Text } from '@tarojs/components'\n\ninterface ILettersHistoryProps {\n  guessedLetters: Set<string>\n  currentAnswer: string\n}\n\nconst LettersHistory: React.FC<ILettersHistoryProps> = ({\n  guessedLetters,\n  currentAnswer\n}) => {\n  const sortedLetters = Array.from(guessedLetters).sort()\n\n  return (\n    <View className='letters-history'>\n      {sortedLetters.map((letter) => (\n        <View\n          key={letter}\n          className={`letter-history-item ${\n            currentAnswer.includes(letter) ? 'correct' : 'wrong'\n          }`}\n        >\n          <Text>{letter}</Text>\n        </View>\n      ))}\n    </View>\n  )\n}\n\nexport default LettersHistory ","export const APP_CONFIG = {\n  TITLE: 'Jogo da Forca',\n  BACKGROUND_COLOR: '#fff5f0',\n  NAV_BAR_STYLE: 'black' as const\n}\n\nexport const HANGMAN_PARTS = [\n  [\n    '  +---+',\n    '  |   |',\n    '      |',\n    '      |',\n    '      |',\n    '      |',\n    '=========',\n  ],\n  [\n    '  +---+',\n    '  |   |',\n    '  O   |',\n    '      |',\n    '      |',\n    '      |',\n    '=========',\n  ],\n  [\n    '  +---+',\n    '  |   |',\n    '  O   |',\n    '  |   |',\n    '      |',\n    '      |',\n    '=========',\n  ],\n  [\n    '  +---+',\n    '  |   |',\n    '  O   |',\n    ' /|   |',\n    '      |',\n    '      |',\n    '=========',\n  ],\n  [\n    '  +---+',\n    '  |   |',\n    '  O   |',\n    ' /|\\\\  |',\n    '      |',\n    '      |',\n    '=========',\n  ],\n  [\n    '  +---+',\n    '  |   |',\n    '  O   |',\n    ' /|\\\\  |',\n    ' /    |',\n    '      |',\n    '=========',\n  ],\n  [\n    '  +---+',\n    '  |   |',\n    '  O   |',\n    ' /|\\\\  |',\n    ' / \\\\  |',\n    '      |',\n    '=========',\n  ],\n] ","import { KeyboardLayout } from '../types/keyboard.types'\n\nexport const KEYBOARD_LAYOUT: KeyboardLayout = [\n  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n  ['Z', 'X', 'C', 'V', 'B', 'N', 'M']\n]\n\nexport const ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\")\n\nexport const KEYBOARD_CONFIG = {\n  CONFETTI_PIECES: 200,\n  CONFETTI_GRAVITY: 0.3,\n  TOAST_DURATION: 2000\n} ","import { IQuestion } from '../types/game.types'\n\nexport const QUESTIONS: IQuestion[] = [\n  { id: \"q1\", question: \"How are you?\", answer: \"FINE\", translation: \"Como você está?\" },\n  { id: \"q2\", question: \"What is your name?\", answer: \"MY NAME IS\", translation: \"Qual é o seu nome?\" },\n  { id: \"q3\", question: \"Where are you from?\", answer: \"I AM FROM\", translation: \"De onde você é?\" },\n  { id: \"q4\", question: \"Nice to meet you\", answer: \"LIKEWISE\", translation: \"Prazer em conhecer você\" },\n  { id: \"q5\", question: \"How is it going?\", answer: \"GREAT\", translation: \"Como vai?\" },\n]\n\nexport const MAX_WRONG_GUESSES = 6\nexport const COUNTDOWN_TIME = 5\nexport const CONFETTI_DURATION = 3000 ","import { useState, useCallback, useEffect } from 'react'\nimport Taro from '@tarojs/taro'\nimport { IGameState, GameStatus } from '../types/game.types'\nimport { QUESTIONS, MAX_WRONG_GUESSES, COUNTDOWN_TIME, CONFETTI_DURATION } from '../constants/questions'\nimport { getFinalMessage } from '../utils/messages'\n\nexport const useGameLogic = () => {\n  const [state, setState] = useState<IGameState>({\n    currentQuestionIndex: 0,\n    guessedLetters: new Set(),\n    wrongGuesses: 0,\n    showTranslation: false,\n    correctCount: 0,\n    gameStatus: 'playing',\n    countdown: COUNTDOWN_TIME,\n    showConfetti: false\n  })\n\n  const [countdownTimer, setCountdownTimer] = useState<NodeJS.Timeout | null>(null)\n\n  const startCountdown = useCallback(() => {\n    setState(prev => ({ ...prev, countdown: COUNTDOWN_TIME }))\n    \n    const timer = setInterval(() => {\n      setState(prev => {\n        const newCount = prev.countdown - 1\n        \n        if (newCount <= 0) {\n          clearInterval(timer)\n          if (prev.gameStatus === 'finished') {\n            restartGame()\n          } else {\n            nextQuestion()\n          }\n          return { ...prev, countdown: COUNTDOWN_TIME }\n        }\n        \n        return { ...prev, countdown: newCount }\n      })\n    }, 1000)\n\n    setCountdownTimer(timer)\n  }, [])\n\n  const handleGuess = useCallback((letter: string) => {\n    if (state.gameStatus !== \"playing\") return\n\n    const answer = QUESTIONS[state.currentQuestionIndex].answer\n    const newGuessedLetters = new Set(state.guessedLetters)\n    newGuessedLetters.add(letter)\n\n    if (!answer.includes(letter)) {\n      const newWrongGuesses = state.wrongGuesses + 1\n      const newGameStatus = newWrongGuesses >= MAX_WRONG_GUESSES ? 'lost' as GameStatus : 'playing'\n      \n      setState(prev => ({\n        ...prev,\n        guessedLetters: newGuessedLetters,\n        wrongGuesses: newWrongGuesses,\n        gameStatus: newGameStatus\n      }))\n\n      if (newGameStatus === 'lost') {\n        Taro.showToast({\n          title: 'Não foi dessa vez...',\n          icon: 'none',\n          duration: 2000\n        })\n        startCountdown()\n      }\n    } else {\n      const newMaskedWord = answer\n        .split(\"\")\n        .map((l) => (l === \" \" ? \" \" : newGuessedLetters.has(l) ? l : \"_\"))\n        .join(\"\")\n\n      const won = !newMaskedWord.includes(\"_\")\n      \n      setState(prev => ({\n        ...prev,\n        guessedLetters: newGuessedLetters,\n        showTranslation: won,\n        gameStatus: won ? 'won' : 'playing',\n        correctCount: won ? prev.correctCount + 1 : prev.correctCount,\n        showConfetti: won\n      }))\n\n      if (won) {\n        Taro.showToast({\n          title: 'Muito bem!',\n          icon: 'success',\n          duration: 2000\n        })\n\n        setTimeout(() => {\n          setState(prev => ({ ...prev, showConfetti: false }))\n        }, CONFETTI_DURATION)\n\n        setTimeout(() => {\n          if (state.currentQuestionIndex === QUESTIONS.length - 1) {\n            setState(prev => ({ \n              ...prev,\n              gameStatus: 'finished',\n              showConfetti: true\n            }))\n            startCountdown()\n          } else {\n            nextQuestion()\n          }\n        }, CONFETTI_DURATION)\n      }\n    }\n  }, [state.currentQuestionIndex, state.guessedLetters, state.wrongGuesses, state.correctCount])\n\n  const nextQuestion = useCallback(() => {\n    const nextIndex = state.currentQuestionIndex + 1\n    \n    if (nextIndex >= QUESTIONS.length) {\n      setState(prev => ({\n        ...prev,\n        gameStatus: 'finished'\n      }))\n      return\n    }\n    \n    setState(prev => ({\n      ...prev,\n      currentQuestionIndex: nextIndex,\n      guessedLetters: new Set(),\n      wrongGuesses: 0,\n      showTranslation: false,\n      gameStatus: 'playing'\n    }))\n  }, [state.currentQuestionIndex])\n\n  const restartGame = useCallback(() => {\n    if (countdownTimer) {\n      clearInterval(countdownTimer)\n      setCountdownTimer(null)\n    }\n    \n    setState({\n      currentQuestionIndex: 0,\n      guessedLetters: new Set(),\n      wrongGuesses: 0,\n      showTranslation: false,\n      correctCount: 0,\n      gameStatus: 'playing',\n      countdown: COUNTDOWN_TIME,\n      showConfetti: false\n    })\n  }, [countdownTimer])\n\n  const getMaskedWord = useCallback(() => {\n    const answer = QUESTIONS[state.currentQuestionIndex].answer\n    return answer\n      .split(\"\")\n      .map((letter) => (letter === \" \" ? \" \" : state.guessedLetters.has(letter) ? letter : \"_\"))\n      .join(\" \")\n  }, [state.currentQuestionIndex, state.guessedLetters])\n\n  useEffect(() => {\n    return () => {\n      if (countdownTimer) {\n        clearInterval(countdownTimer)\n      }\n    }\n  }, [countdownTimer])\n\n  return {\n    state,\n    handleGuess,\n    restartGame,\n    getMaskedWord,\n    getFinalMessage: () => getFinalMessage(state.correctCount, QUESTIONS.length)\n  }\n} ","import { useState, useEffect, useCallback } from 'react'\nimport { IKeyboardState } from '../types/keyboard.types'\n\nexport const useKeyboard = (onKeyPress: (letter: string) => void) => {\n  const [state, setState] = useState<IKeyboardState>({\n    windowWidth: 0,\n    windowHeight: 0,\n    showKeyboard: true\n  })\n\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    const key = event.key.toUpperCase()\n    if (/^[A-Z]$/.test(key)) {\n      onKeyPress(key)\n    }\n  }, [onKeyPress])\n\n  const updateWindowDimensions = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight\n    }))\n  }, [])\n\n  const toggleKeyboard = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      showKeyboard: !prev.showKeyboard\n    }))\n  }, [])\n\n  useEffect(() => {\n    if (process.env.TARO_ENV === 'h5') {\n      document.addEventListener('keydown', handleKeyDown)\n      window.addEventListener('resize', updateWindowDimensions)\n      updateWindowDimensions()\n\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown)\n        window.removeEventListener('resize', updateWindowDimensions)\n      }\n    }\n  }, [handleKeyDown, updateWindowDimensions])\n\n  return {\n    state,\n    toggleKeyboard\n  }\n} ","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"!!../../../node_modules/@tarojs/taro-loader/lib/entry-cache.js?name=pages/index/index!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"MiniApp\"};\n\n\n\nvar taroOption = createPageConfig(component, 'pages/index/index', {root:{cn:[]}}, config || {})\nif (component && component.behaviors) {\n  taroOption.behaviors = (taroOption.behaviors || []).concat(component.behaviors)\n}\nvar inst = Page(taroOption)\n\n\n\nexport default component\n","export const calculateScore = (correctCount: number, totalQuestions: number): number => {\n  return Math.round((correctCount / totalQuestions) * 100)\n}\n\nexport const getMaskedWord = (answer: string, guessedLetters: Set<string>): string => {\n  return answer\n    .split(\"\")\n    .map((letter) => (letter === \" \" ? \" \" : guessedLetters.has(letter) ? letter : \"_\"))\n    .join(\" \")\n}\n\nexport const isValidLetter = (key: string): boolean => {\n  return /^[A-Z]$/.test(key)\n}\n\nexport const hasWon = (maskedWord: string): boolean => {\n  return !maskedWord.includes(\"_\")\n}\n\nexport const formatTime = (seconds: number): string => {\n  return `${seconds} segundo${seconds !== 1 ? 's' : ''}`\n} ","import { calculateScore } from './gameHelpers'\n\nexport const getFinalMessage = (correctCount: number, totalQuestions: number): string => {\n  const percentage = calculateScore(correctCount, totalQuestions)\n\n  if (percentage === 100) {\n    return 'Incrível! Você acertou todas as questões!'\n  } else if (percentage >= 80) {\n    return 'Muito bem! Você teve um ótimo desempenho!'\n  } else if (percentage >= 60) {\n    return 'Bom trabalho! Continue praticando!'\n  } else if (percentage >= 40) {\n    return 'Você está no caminho certo! Tente novamente!'\n  } else {\n    return 'Não desista! A prática leva à perfeição!'\n  }\n}\n\nexport const getGameMessages = {\n  lost: 'Não foi dessa vez...',\n  won: 'Muito bem!',\n  nextQuestion: 'Próxima pergunta em',\n  restart: 'Reiniciando em',\n  finalScore: 'Pontuação final:',\n  playAgain: 'Jogar Novamente',\n  typeLetter: 'Digite aqui para jogar...'\n} ","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nexport { _arrayLikeToArray as default };","function _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nexport { _arrayWithHoles as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","function _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nexport { _iterableToArrayLimit as default };","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _nonIterableRest as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nfunction _slicedToArray(r, e) {\n  return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();\n}\nexport { _slicedToArray as default };","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nexport { _unsupportedIterableToArray as default };"],"names":[],"sourceRoot":""}